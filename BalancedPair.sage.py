

# This file was *autogenerated* from the file /mnt/c/Users/seoji/code/sage/BalancedPair.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1000 = Integer(1000); _sage_const_1 = Integer(1); _sage_const_100 = Integer(100); _sage_const_30 = Integer(30); _sage_const_0p05 = RealNumber('0.05'); _sage_const_500 = Integer(500)
from sage.combinat.words import *

from sage.graphs.graph_plot import *

from sage.graphs.graph_plot_js import gen_html_code

from sage.misc.viewer import viewer, browser


def Reset_balanced_vector(s):
    """

    Calculate the balanced vector of a word.


    Args:

        self (Word): The input word.


    Returns:

        dict: The balanced vector of the word.
    """

    # print("self:", self)

    balanced_vector = {key: _sage_const_0  for key in s.parent().alphabet()}

    return balanced_vector


def Balanced_pair_list(s, t, n=_sage_const_1000 ):
    """

    Check if the given string has balanced pairs of infinite words using Word from Sage.


    Args:

        s,t (word): The input infinite words.


    Returns:

        Alphabet: The Balanced Pair of 2 infinite words.
    """

    if s.parent().alphabet() != t.parent().alphabet():

        raise ValueError("The two words must have the same alphabet.")

    min_length = min(s.length(), t.length(), n)

    # print("min_length:", min_length)

    head = _sage_const_0 

    startpos = _sage_const_0 

    A = []

    s.balanced_vector = Reset_balanced_vector(s)

    t.balanced_vector = Reset_balanced_vector(t)

    for head in range(min_length):

        # print("subword_s:", subword_s)

        s.balanced_vector[s[head]] += _sage_const_1 

        t.balanced_vector[t[head]] += _sage_const_1 

        # print("s.balanced_vector:", s.balanced_vector)

        # print("t.balanced_vector:", t.balanced_vector)

        if s.balanced_vector == t.balanced_vector:

            A.append((str(s[startpos : head + _sage_const_1 ]), str(t[startpos : head + _sage_const_1 ])))

            # print("A+:", [s[startpos:head+1], t[startpos:head+1]])

            # print("head:" , head)

            startpos = head + _sage_const_1 

            s.balanced_vector = Reset_balanced_vector(s)

            t.balanced_vector = Reset_balanced_vector(t)

    return A


def Balanced_pair_alphabet(s, t, n=_sage_const_1000 ):

    return set(Balanced_pair_list(s, t, n))


def Lifted_Morphism(s, A):
    """

    Lift a morphism to a new morphism.


    Args:

        s (WordMorphism): The input morphism.

        A (alphabet): The set of balanced pairs.


    Returns:

        WordMorphism: The lifted morphism.
    """

    # print("s:", s)

    # print("s._letter:", s._letter)

    # print("s._letter:", s._letter)

    # print("s._letter:", s._letter)

    lifted_morphism = {}

    lifted_alphabet = set(list(A))

    for balanced_pair in A:

        # print("balanced_pair:", balanced_pair)

        # print("lifted_alphabet:", lifted_alphabet)

        lifted_morphism[balanced_pair] = Balanced_pair_list(
            Word(balanced_pair[_sage_const_0 ]).apply_morphism(s),
            Word(balanced_pair[_sage_const_1 ]).apply_morphism(s),
        )

        # print("lifted_morphism[balanced_pair]:", lifted_morphism[balanced_pair])

        # print("set lifted_morphism[balanced_pair]:", set(lifted_morphism[balanced_pair]))

        lifted_alphabet = lifted_alphabet.union(set(lifted_morphism[balanced_pair]))

    return (WordMorphism(lifted_morphism), lifted_alphabet)


def Whole_irreducible_balanced_pair(s, alpha, iteration=_sage_const_100 ):
    """

    Check if the given string has whole irreducible balanced pairs.


    Args:

        s (morphism): The initial morphism.

        iteration (int): The number of iterations to check.


    Returns:

        bool: True if the word has whole irreducible balanced pairs, False otherwise.
    """

    # print("self:", self)

    # print("iteration:", iteration)

    alpha_0 = alpha

    for i in range(iteration):

        # print("i:", i)

        (mor, alpha_1) = Lifted_Morphism(s, alpha_0)

        if len(alpha_1.difference(alpha_0)) == _sage_const_0 :

            print("irreducible_balanced_pair iteration:", i)

            return mor

        alpha_0 = alpha_1

    return False


def lifted_morphism_matrix(m):
    """

    Create a matrix of lifted morphisms.


    Args:

        m (WordMorphism): The input morphism.


    Returns:

        Matrix: The matrix of lifted morphisms.
    """

    return m.incidence_matrix()


def lifted_morphism_graph(m):
    """

    Create a graph of lifted morphisms.


    Args:

        m (matrix): The input morphism incidence matrix.


    Returns:

        Graph: The graph of lifted morphisms.
    """

    G = DiGraph(m, loops=True)

    return G


# Example usage:

s = WordMorphism({"0": "01", "1": "02", "2": "0"})

F = s.fixed_point("0")

print("F:", F)
print("s:", s)

print(" s is_primitive:", s.is_primitive())

# print("F.parent:", F.parent().alphabet())

result = Balanced_pair_alphabet(F, F[_sage_const_1 :])

print("balanced pair alphabet by shift:", result)

# print("Lifted_Morphism:", Lifted_Morphism(s, result))

mor = Whole_irreducible_balanced_pair(s, result, _sage_const_30 )

mor._codomain = mor.domain()

# print("Lifted_Morphism alphabet:", mor.domain())

# print("Lifted_Morphism:", mor)

# print("Lifted_Morphism:", dir(mor))

# print("Lifted_Morphism:", eq(mor))

# print("Lifted_Morphism:", getattr(mor))

print(latex(mor))

incidence = lifted_morphism_matrix(mor)
if not mor.is_endomorphism():
    print("lifted_morphism is not endomorphism")

    diff = set(mor.domain().alphabet()).difference(set(mor.codomain().alphabet()))
    print("lifted_morphism domain difference:", diff)
else:

    print("lifted_morphism is primitive:", mor.is_primitive())
print("incidence:", incidence)

# print("mor morph:" ,mor._morph)
G = lifted_morphism_graph(mor._morph)
filename = gen_html_code(
    G, vertex_labels=True, gravity=_sage_const_0p05 , force_spring_layout=True, charge=-_sage_const_500 
)  # vertex_size=20,link_distance=200

# print("filename:", filename)

with open(filename, "r") as f:

    data = f.read()

with open("/tmp/dom.html", "w") as f:

    f.write(data)

os.system("sensible-browser file://///wsl.localhost/Ubuntu-seo/tmp/dom.html")

# viewer.browser('sensible-browser')

# os.system('%s %s 2>/dev/null 1>/dev/null &' % (browser(), filename))

# graph.show(method='js')

P = GraphPlot(G, {"vertex_size": _sage_const_1000 , "layout": "spring"})

# P.set_vertices()

save(P, "/tmp/dom.png")  # ,axes=False,aspect_ratio=True

os.system("display /tmp/dom.png &")

